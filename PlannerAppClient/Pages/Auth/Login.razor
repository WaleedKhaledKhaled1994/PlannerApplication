@page "/auth/login"
@layout AuthLayout
@using PlannerApp.Shared.Models

@inject AuthenticationService authService
@inject NavigationManager navigationManager
@inject ILocalStorageService localService

<div class="row">
    <div class="col-12">
        <h2>Login To Your Account</h2>
        <EditForm Model="model"
                  OnValidSubmit="loginUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />

               

                <DataAnnotationsValidator />
                <ValidationSummary />
                <label>Email</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>
                <label>Password</label>
                <RadzenPassword @bind-Value="model.Password"></RadzenPassword>
                <hr />

                <RadzenButton ButtonType="Radzen.ButtonType.Submit"
                              Text="Login"
                              ButtonStyle="Radzen.ButtonStyle.Secondary"
                              class="btn-block mr-2"
                              Disabled="isBusy" />

                <RadzenButton Click="GoToRegister"
                              ButtonType="Radzen.ButtonType.Button"
                              Text="Register"
                              ButtonStyle="Radzen.ButtonStyle.Primary"
                              class="btn-block mr-2"
                              Disabled="isBusy" />
            </RadzenCard>

        </EditForm>
    </div>
</div>

@code {
    LoginRequest model = new LoginRequest();
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;
    bool isBusy = false;
    Dictionary<string, string> UserInfo = new Dictionary<string, string>();

    public async Task loginUser()
    {

        isBusy = true;
        var result = await authService.LoginUserAsync(model);

        if (result.IsSuccess)
        {

            var userInfo = new PlannerApp.Client.Models.LocalUserInfo()
            {
                AccessToken = result.Message,
                Email = result.UserInfo["Email"],
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier]
            };
            await localService.SetItemAsync("User", userInfo);
            navigationManager.NavigateTo("/");
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;


        }
        isBusy = false;

    }

    void GoToRegister()
    {
        navigationManager.NavigateTo("/auth/register");
    }
}
